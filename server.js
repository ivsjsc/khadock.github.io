// server.js - Backend server for KhaDock AI Design Generator
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
import path from 'path';
import { fileURLToPath } from 'url';

// ES modules dirname workaround
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
    origin: process.env.NODE_ENV === 'production' ? 'https://khadock.com' : 'http://localhost:3000',
    credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// Serve static files from the root directory for GitHub Pages compatibility
app.use(express.static(__dirname));

// Initialize Gemini AI
let genAI;
try {
    if (!process.env.GEMINI_API_KEY) {
        console.warn('⚠️  GEMINI_API_KEY not found in environment variables');
    } else {
        genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        console.log('✅ Google Generative AI initialized successfully');
    }
} catch (error) {
    console.error('❌ Failed to initialize Google Generative AI:', error.message);
}

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        geminiReady: !!genAI
    });
});

// Main AI Design Generator endpoint
app.post('/api/khadock-gemini-proxy', async (req, res) => {
    try {
        console.log('🚀 Received AI design request:', {
            requestType: req.body.requestType,
            targetLanguage: req.body.targetLanguage,
            promptLength: req.body.prompt ? req.body.prompt.length : 0
        });

        if (!genAI) {
            return res.status(500).json({
                error: {
                    message: 'AI service is not properly configured. Please check server configuration.'
                }
            });
        }

        const { prompt, targetLanguage = "English", requestType = "design" } = req.body;

        if (!prompt || prompt.trim().length === 0) {
            return res.status(400).json({
                error: {
                    message: 'Prompt is required and cannot be empty.'
                }
            });
        }

        // Get the generative model
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // Enhanced prompt based on request type
        let enhancedPrompt = prompt;
        
        if (requestType === "initialDesign") {
            enhancedPrompt = `As KhaDock's expert dock designer in Florida, create a detailed dock concept for: "${prompt}"

Provide a comprehensive response in ${targetLanguage} with these sections:
**Concept Name:** [Creative name for the design]
**Overall Vision:** [2-3 sentences describing the concept]
**Key Features & Functionality:**
- [Feature 1 with brief description]
- [Feature 2 with brief description]
- [Feature 3 with brief description]
**Suggested Materials:** [Materials suitable for Florida climate]
**Aesthetic Style:** [Design style and visual appeal]
**Best Suited For:** [Target users/property types]

Focus on practicality for Florida's coastal environment (sun, saltwater, hurricanes). Keep response 150-250 words.`;
        }

        // Generate content
        const result = await model.generateContent(enhancedPrompt);
        const response = await result.response;
        const text = response.text();

        if (!text) {
            throw new Error('No content generated by AI');
        }

        console.log('✅ AI response generated successfully:', {
            responseLength: text.length,
            requestType
        });

        res.json({ 
            text: text,
            requestType: requestType,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('❌ Error in AI design generation:', {
            message: error.message,
            status: error.status,
            type: error.constructor.name
        });

        // Handle different types of errors
        if (error.message.includes('API key')) {
            return res.status(401).json({
                error: {
                    message: 'Authentication failed. Please check API configuration.'
                }
            });
        }

        if (error.message.includes('quota')) {
            return res.status(429).json({
                error: {
                    message: 'API quota exceeded. Please try again later.'
                }
            });
        }

        if (error.message.includes('safety')) {
            return res.status(400).json({
                error: {
                    message: 'Content filtered for safety reasons. Please try a different description.'
                }
            });
        }

        res.status(500).json({
            error: {
                message: error.message || 'An unexpected error occurred while generating your design. Please try again.'
            }
        });
    }
});

// Serve the main website
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Catch-all handler for SPA routing
app.get('*', (req, res) => {
    // Check if the request is for a static file
    const fileExtensions = ['.html', '.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.webp', '.mp4'];
    const hasExtension = fileExtensions.some(ext => req.path.includes(ext));
    
    if (hasExtension) {
        // Try to serve the static file
        res.sendFile(path.join(__dirname, req.path), (err) => {
            if (err) {
                res.status(404).json({ error: 'File not found' });
            }
        });
    } else {
        // For routes without extensions, serve index.html (SPA behavior)
        res.sendFile(path.join(__dirname, 'index.html'));
    }
});

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('🔥 Unhandled error:', error);
    res.status(500).json({
        error: {
            message: 'Internal server error occurred.'
        }
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`
🚢 KhaDock Server is running!
🌐 Port: ${PORT}
🔗 URL: http://localhost:${PORT}
🤖 Gemini AI: ${genAI ? '✅ Ready' : '❌ Not configured'}
⚙️  Environment: ${process.env.NODE_ENV || 'development'}
    `);
    
    if (!process.env.GEMINI_API_KEY) {
        console.log(`
⚠️  To enable AI features, create a .env file with:
GEMINI_API_KEY=your_api_key_here
        `);
    }
});

export default app;